@use "sass:map";

@import "./variables";

@mixin lane-style($padding: $lane-padding) {
    box-shadow: 5px 5px 13px 0px #00000073;
    outline: 1px solid map.get($semantic-colors, static-lane-outline-color);
    outline-offset: -1px;
    border-radius: $border-radius;
    // backdrop-filter: $frost-blur;
    background-color: map.get($semantic-colors, lane-non-static-background-color);
    padding: $padding;
}

@mixin button() {
    border: none;
    border-radius: 2px;

    line-height: map.get($fonts, font-size) * 1.2 !important;
    padding: $button-padding !important;
    display: block;
    font: inherit;
    cursor: pointer;
    box-shadow: inset 0 0 0 1px map.get($semantic-colors, translucent-color);
    outline: none;
    background: transparent;
    color: map.get($fonts, text-color);
    // display: flex;
    gap: 0.25rem;
    align-items: center;
    text-align: center;

    &:hover,
    &.active {
        box-shadow: inset 0 0 0 1px map.get($fonts, text-color);
    }
}


@mixin generate-utility-classes($padding-values) {
    @each $padding in $padding-values {
        .p-#{str-replace($padding, ".", "")} {
            padding: $padding * 1rem * $spacer-multiplier;
        }

        .p-x-#{str-replace($padding, ".", "")} {
            padding-left: $padding * 1rem * $spacer-multiplier;
            padding-right: $padding * 1rem * $spacer-multiplier;
        }

        .p-y-#{str-replace($padding, ".", "")} {
            padding-top: $padding * 1rem * $spacer-multiplier;
            padding-bottom: $padding * 1rem * $spacer-multiplier;
        }

        .p-l-#{str-replace($padding, ".", "")} {
            padding-left: $padding * 1rem * $spacer-multiplier;
        }

        .p-r-#{str-replace($padding, ".", "")} {
            padding-right: $padding * 1rem * $spacer-multiplier;
        }

        .p-t-#{str-replace($padding, ".", "")} {
            padding-top: $padding * 1rem * $spacer-multiplier;
        }

        .p-b-#{str-replace($padding, ".", "")} {
            padding-top: $padding * 1rem * $spacer-multiplier;
        }

        .m-#{str-replace($padding, ".", "")} {
            margin: $padding * 1rem * $spacer-multiplier;
        }

        .m-x-#{str-replace($padding, ".", "")} {
            margin-left: $padding * 1rem * $spacer-multiplier;
            margin-right: $padding * 1rem * $spacer-multiplier;
        }

        .m-y-#{str-replace($padding, ".", "")} {
            margin-top: $padding * 1rem * $spacer-multiplier;
            margin-bottom: $padding * 1rem * $spacer-multiplier;
        }

        .m-l-#{str-replace($padding, ".", "")} {
            margin-left: $padding * 1rem * $spacer-multiplier;
        }

        .m-r-#{str-replace($padding, ".", "")} {
            margin-right: $padding * 1rem * $spacer-multiplier;
        }

        .m-t-#{str-replace($padding, ".", "")} {
            margin-top: $padding * 1rem * $spacer-multiplier;
        }

        .m-b-#{str-replace($padding, ".", "")} {
            margin-bottom: $padding * 1rem * $spacer-multiplier;
        }

        .g-#{str-replace($padding, ".", "")} {
            gap: $padding * 1rem * $spacer-multiplier
        }
    }
}

@mixin generate-logo-sizes($sizes) {
    @each $size in $sizes {
        .logo-#{$size} {
            width: $size * 1rem;
            height: auto;
        }
    }
}

@mixin export-css-variables($map) {
    @each $key, $value in $map {
        --#{"" + $key}: #{$value};
    }
}

@mixin generate-semantic-color-classes($map) {
    @each $key, $value in $map {
        .#{"" + $key} {
            color: #{$value};
        }

        .#{"" + $key}-background {
            background-color: #{$value};
        }
    }
}