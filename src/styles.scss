@use "sass:string";
@use "sass:map";

@import 'assets/jetbrains-mono/jetbrains-mono.scss';
@import "assets/variables";
@import "assets/mixins";
@import "assets/animations";
@import "assets/gantt";
@import "assets/date-picker";

:root {
  @include export-css-variables($colors, true);
  @include export-css-variables($semantic-colors, true);
  @include export-css-variables($fonts);
}

@include generate-semantic-color-classes($semantic-colors);

html {
  background-color: map.get($colors, dark-gray-2-muted);
  color: map.get($semantic-colors, text-color);
  font-family: map.get($fonts, font-family);
  font-size: map.get($fonts, font-size)
}

a {
  color: map.get($semantic-colors, text-color);
}



body {
  margin: 0;
  padding: 0;

  // font-size: $font-size;
  &.dragging lane {
    overflow: initial !important;
  }
}

*:not(ol):not(ul):not(li) {
  scrollbar-color: map.get($colors, scrollbar-color) map.get($colors, background-color);
  scrollbar-width: thin;
  margin: 0;
  padding: 0;
}

.floating-label {
  position: absolute;
  top: 100%;
  margin: 0;

  font-size: 75%;
  color: map.get($colors, translucent-color);
}

.floating-label.board-floating-label {
  top: 0;
  white-space: nowrap;
}



.fixed-bottom {
  position: fixed;
  bottom: 0;
}

p {
  padding: 0 !important;
  margin: 0 !important;
}

.NgxEditor__Content {
  padding: 0 !important;
  margin: 0 !important
}

.standard {
  font-size: map.get($fonts, font-size);
}

.big {
  font-size: $big-font-size;
}

.small {
  font-size: $small-font-size;
}

.prosemirror-mention-node {
  color: blue !important;
  text-decoration: underline !important;
}

.prosemirror-tag-node {
  color: gray !important;
  font-style: italic;
}

.suggestion-item-list {
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
}

.suggestion-item {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.suggestion-item:hover {
  background-color: #f1f1f1;
  cursor: pointer;
}

.pointer {
  cursor: pointer;
}

.selectable {
  opacity: $translucent-opacity;
  cursor: pointer;
}

.active,
.selectable:hover {
  opacity: 1;
}

.relative {
  position: relative !important;
}

.absolute {
  position: absolute;
}

.inline-block {
  display: inline-bloc;
}


.static {
  position: static;
}

.fixed {
  position: fixed;
}

.sticky {
  position: sticky;
}

button {
  @include button();
}

.flex {
  display: flex;
}

.inline-flex {
  display: inline-flex;
}

.overflow-hidden {
  overflow: hidden;
}

.text-center {
  text-align: center;
}

.always-on-top {
  z-index: 1010;
}

.flex-child {
  flex-basis: 0;
  flex-grow: 1;
  flex-shrink: 1;
  width: 0;
}

.wrap {
  flex-wrap: wrap;
}

.column {
  flex-direction: column;
}

.align-items-center {
  align-items: center;
}

.align-items-start {
  align-items: start;
}

.align-items-end {
  align-items: flex-end;
}

.justify-content-center {
  justify-content: center;
}

.justify-content-between {
  justify-content: space-between;
}

.justify-content-end {
  justify-content: end;
}

.absolute {
  position: absolute;
}

.top {
  top: 0;
}

.right {
  right: 0;
}

.hidden {
  display: none;
}

.text-align-center {
  text-align: center;
}

.w-100 {
  width: 100%;
}

.h-0 {
  height: 0 !important;
  overflow: hidden;
}

.grow {
  flex-grow: 1;
}

.no-grow {
  flex-grow: 0;
}

.no-wrap {
  white-space: nowrap;
}



@function str-replace($string, $search, $replace: '') {
  $string: #{$string};
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@include generate-utility-classes(-0.25 -0.5 -1 0.25 0.5 1);

.danger {
  color: map.get($colors, danger-color)
}

.warning {
  color: map.get($colors, warning-color)
}

.discarded {
  text-decoration: line-through;
}

.recurrence-child {
  font-style: italic;
}


.drag-handle {
  transform: scale(1.5);
}

.rotate {
  transform: rotate(90deg);
}

.translucent {
  //background-color: map.get($semantic-colors, translucent-color) !important;
  opacity: $translucent-opacity;
}

.half-translucent {
  //background-color: map.get($semantic-colors, translucent-color) !important;
  opacity: $half-translucent-opacity;
}

.disabled {
  opacity: 0.5;
}

[contenteditable="true"] {
  border: none !important;
  outline: none !important;
}

input,
textarea,
input:-internal-autofill-selected {
  color-scheme: dark;
  font-family: 'JetBrains Mono';
  overflow: visible;
  background-color: map.get($semantic-colors, background-color) !important;
  color: map.get($semantic-colors, text-color) !important;
  outline: none;
  border-color: transparent;
  border: 1px solid map.get($semantic-colors, translucent-color);
  width: 100%;
  font-size: map.get($fonts, font-size)
}

.chevron-down:after {
  content: "‚ùØ";
  display: inline-block;
  transform: rotate(90deg);
}

.chevron-up:after {
  content: "‚ùØ";
  display: inline-block;
  transform: rotate(-90deg);
}

.chevron-left:after {
  content: "‚ùØ";
  display: inline-block;
  transform: rotate(-180deg);
}

.chevron-right:after {
  content: "‚ùØ";
  display: inline-block;
}

.gantter-icon:after {
  content: "üìä";
  display: inline-block;
  transform: rotate(90deg);
}

.loading::after {
  content: "üåê";
  display: inline-block;
  position: absolute;
  top: -2rem;
  right: 0;
  animation: pulse 1s ease 0s infinite normal forwards;
}


select {
  background-color: map.get($semantic-colors, background-color);
  color: map.get($semantic-colors, text-color);
  border: 1px solid map.get($semantic-colors, translucent-color);
}

select option {
  background-color: map.get($semantic-colors, background-color);
  color: map.get($semantic-colors, text-color);
}

.link {
  text-decoration: underline;
  cursor: pointer;
}

.search-highlight {
  background-color: yellow !important;
}

.drag-handle {
  cursor: grabbing;
}

.colored-title {
  color: map.get($semantic-colors, lane-title-color);
  font-size: $title-size;
  font-weight: bold;
}

.pill {
  border: 1px solid map-get($semantic-colors , pill-1);
  color: map-get($semantic-colors , pill-1);
  padding: 0.1rem 0.4rem;
  border-radius: 12px;
  text-overflow: ellipsis;
  white-space: nowrap;
  flex-shrink: 1;
  text-overflow: ellipsis;
  overflow: hidden;
  min-width: 3rem;

  &.color-2 {
    border: 1px solid map-get($semantic-colors , pill-2);
    color: map-get($semantic-colors , pill-2);
  }
}


.something-is-dragging {
  outline: 1px dashed map.get($semantic-colors, translucent-color) !important;
  outline-offset: -1px;
}

.something-is-dragging.something-is-dragging-and-i-am-hovered {
  outline: 1px dashed map.get($semantic-colors, half-translucent-color) !important;
  outline-offset: -1px;
}

.dumb-dropzone {
  min-height: 0;
  transition: min-height 0.15s ease-out;
}

.dumb-dropzone.something-is-dragging {
  min-height: 1rem;
}

.leader-line {
  z-index: 9999;
}