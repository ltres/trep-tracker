@use "sass:string";

@import 'assets/jetbrains-mono/jetbrains-mono.scss';
@import "assets/variables";
html {
  background-color: $background-color;
  color: $text-color;
  font-family: 'JetBrains Mono';
  font-size: $font-size
}

body {
  margin: 0;
  padding: 0;
  font-size: $font-size;
}

* {
  scrollbar-color: $lane-title-color $background-color;
  scrollbar-width: thin;
}

.floating-label {
  position: absolute;
  top: 100%;
  margin: 0;
  
  font-size: 75%;
  color: $translucent-color;
}

.floating-label.board-floating-label {
  top: 0;
  white-space: nowrap;
}



.fixed-bottom {
  position: fixed;
  bottom: 0;
}

p {
  padding: 0 !important;
  margin: 0 !important;
}

.NgxEditor__Content {
  padding: 0 !important;
  margin: 0 !important
}

.big {
  font-size: 150%;
}
.small{
  font-size:75%;
}

.prosemirror-mention-node {
  color: blue !important;
  text-decoration: underline !important;
}

.prosemirror-tag-node {
  color: gray !important;
  font-style: italic;
}

.suggestion-item-list {
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
}

.suggestion-item {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.suggestion-item:hover {
  background-color: #f1f1f1;
  cursor: pointer;
}

.pointer{
  cursor: pointer;
}

button {
  border: none;
  color: white;
  border-radius: 0;
  padding: 0.2rem 0.5rem;
  font: inherit;
  cursor: pointer;
  outline: none;
  background: $text-color;
  color: $background-color;
  &.inverted{
      background: transparent;
      color: $text-color;
      //border: 1px solid $text-color;
      box-shadow: inset 0 0 0 1px $text-color
    }
  }

.flex{
  display: flex;
}
.column{
  flex-direction: column;
}

.grow{
  flex-grow: 1;
}
.no-grow{
  flex-grow: 0;
}
.no-wrap{
  white-space: nowrap;
}

@function str-replace($string, $search, $replace: '') {
  $string: #{$string};
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin generate-utility-classes($padding-values) {
  @each $padding in $padding-values {
    .p-#{str-replace($padding, ".", "")} {
      padding: $padding * 1rem;
    }
    .p-x-#{str-replace($padding, ".", "")} {
      padding-left: $padding * 1rem;
      padding-right: $padding * 1rem;
    }
    .p-y-#{str-replace($padding, ".", "")} {
      padding-top: $padding * 1rem;
      padding-bottom: $padding * 1rem;
    }
    .m-#{str-replace($padding, ".", "")} {
      margin: $padding * 1rem;
    }
    .m-x-#{str-replace($padding, ".", "")} {
      margin-left: $padding * 1rem;
      margin-right: $padding * 1rem;
    }
    .m-y-#{str-replace($padding, ".", "")} {
      margin-top: $padding * 1rem;
      margin-bottom: $padding * 1rem;
    }
    .g-#{str-replace($padding, ".", "")} {
      gap: $padding * 1rem;
    }
  }
}

@include generate-utility-classes(0.25 0.5 1);

.danger{
  color: $danger-color
}
.completed{
  color: $completed-color
}


.drag-handle{
  font-size: 150%;
  color: $translucent-color!important;
  cursor: pointer;
}

.rotate{
  transform: rotate(90deg);
}
.translucent{
  //background-color: $translucent-color !important;
  opacity: $translucent-opacity;
}
[contenteditable="true"]{
  border: none!important;
  outline: none!important;
}
.tag{
  color: $tag-color;
}